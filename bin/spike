#!/usr/bin/env ruby
# encoding: utf-8

$: << File.expand_path('../../lib', __FILE__)

require 'optparse'
require 'set'
require 'highline'
require 'cql'


class CqlExecutor
  def initialize(args)
    @options = parse_options!(args)
    @highline = HighLine.new
  end

  def run(io)
    @client = Cql::Client.connect(@options)

    @highline.say('Connected to %s:%d' % [@options[:host] || 'localhost', @options[:port] || 9042])

    # TODO register for events

    begin
      buffer = ''
      loop do
        keyspace_name = @client.keyspace || '(no keyspace)'
        if buffer.empty?
          prompt = "#{keyspace_name}> "
        else
          prompt = "#{keyspace_name}… "
        end
        line = @highline.ask(prompt) { |q| q.readline = true }
        buffer << line
        if semi_index = buffer.index(';')
          query = buffer.slice!(0, semi_index + 1)
          prepare_and_execute_request(query)
        end
      end
      prepare_and_execute_request(buffer)
    rescue Cql::CqlError => e
      @highline.say("Error: #{e.message}")
      retry
    rescue Interrupt, EOFError
      exit
    ensure
      @client.close
    end
  end

  private

  def parse_options!(args)
    options = {}

    option_parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename(__FILE__)} [options]"
      opts.separator('')
      opts.on('--help', 'Show this message') do
        $stderr.puts(opts)
        exit!
      end
      opts.on('-h', '--host HOST', 'Connect to HOST, defaults to localhost') do |host|
        options[:host] = host
      end
      opts.on('-p', '--port PORT', Integer, 'Connect to PORT, defaults to 9042') do |port|
        options[:port] = port
      end
      opts.on('-v', '--verbose', 'Print requests to STDERR') do |port|
        options[:verbose] = true
      end
      opts.on('-k', '--keyspace KEYSPACE', 'Start in keyspace') do |ks|
        options[:keyspace] = ks
      end
      opts.separator('')
      opts.separator('Pass CQL commands on STDIN, prints results on STDOUT')
      opts.separator('')
    end

    option_parser.parse!
    
    options
  end

  def prepare_and_execute_request(query)
    query.chomp!(';')
    query.strip!
    unless query.empty?
      format_table_output(@client.execute(query, :one))
    end
  end

  def format_table_output(rows)
    table_names = []
    header = ''
    row_format = ''
    divider = ''
    column_widths = {}
    if rows && rows.any?
      rows.metadata.each do |ks, table, column, type|
        table_names << [ks, table].join('.')
        column_width = [format_value(rows.first[column]).length, column.length].max
        column_widths[column] = column_width
        format = "%-#{column_width}.#{column_width}s"
        header << "#{format} | " % [column]
        row_format << "#{format} | "
        divider << ('-' * column_width) << '-+-'
      end
      row_format.sub!(/ \| $/, '')
      divider = divider[0..-4]
      table_name = table_names.uniq.join(', ')

      $stdout.puts(table_name)
      $stdout.puts('=' * table_name.length)
      $stdout.puts(header[0, divider.length])
      $stdout.puts(divider)

      rows.each do |row|
        values = rows.metadata.map do |_, _, column, _|
          limit_width(format_value(row[column]), column_widths[column])
        end
        $stdout.puts(row_format % values)
      end
    else
      $stdout.puts('(empty result set)')
    end
  end

  def format_value(value)
    case value
    when Set
      value.to_a.to_s
    when nil
      '(nil)'
    else
      value.to_s
    end
  end

  def limit_width(value, width)
    if value.length > width
      value[0, width - 1] << '…'
    else
      value
    end
  end
end

CqlExecutor.new(ARGV).run(STDIN)
